var _davydog187$elm_pong$Fibonacci$fibHelper = function (n) {
	var addNewValue = function (solution) {
		return A2(
			_folkertdev$elm_state$State$map,
			function (_p0) {
				return solution;
			},
			_folkertdev$elm_state$State$modify(
				A2(_elm_lang$core$Dict$insert, n, solution)));
	};
	var calculateStatefullFib = function (n) {
		return A3(
			_folkertdev$elm_state$State$map2,
			F2(
				function (x, y) {
					return x + y;
				}),
			_davydog187$elm_pong$Fibonacci$fibHelper(n - 1),
			_davydog187$elm_pong$Fibonacci$fibHelper(n - 2));
	};
	var modifyWhenNeeded = function (cache) {
		var _p1 = A2(_elm_lang$core$Dict$get, n, cache);
		if (_p1.ctor === 'Just') {
			return _folkertdev$elm_state$State$state(_p1._0);
		} else {
			return A2(
				_folkertdev$elm_state$State$andThen,
				addNewValue,
				calculateStatefullFib(n));
		}
	};
	return A2(_folkertdev$elm_state$State$andThen, modifyWhenNeeded, _folkertdev$elm_state$State$get);
};
var _davydog187$elm_pong$Fibonacci$fibsHelper = _folkertdev$elm_state$State$traverse(_davydog187$elm_pong$Fibonacci$fibHelper);
var _davydog187$elm_pong$Fibonacci$fibs = function () {
	var initialState = _elm_lang$core$Dict$fromList(
		{
			ctor: '::',
			_0: {ctor: '_Tuple2', _0: 0, _1: 1},
			_1: {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 1, _1: 1},
				_1: {ctor: '[]'}
			}
		});
	return function (_p2) {
		return A2(
			_folkertdev$elm_state$State$finalValue,
			initialState,
			_davydog187$elm_pong$Fibonacci$fibsHelper(_p2));
	};
}();
var _davydog187$elm_pong$Fibonacci$mainx = _elm_lang$html$Html$text(
	_elm_lang$core$Basics$toString(
		_davydog187$elm_pong$Fibonacci$fibs(
			A2(_elm_lang$core$List$range, 0, 9))));
var _davydog187$elm_pong$Fibonacci$fib = function (n) {
	var initialState = _elm_lang$core$Dict$fromList(
		{
			ctor: '::',
			_0: {ctor: '_Tuple2', _0: 0, _1: 1},
			_1: {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 1, _1: 1},
				_1: {ctor: '[]'}
			}
		});
	return A2(
		_folkertdev$elm_state$State$finalValue,
		initialState,
		_davydog187$elm_pong$Fibonacci$fibHelper(n));
};
