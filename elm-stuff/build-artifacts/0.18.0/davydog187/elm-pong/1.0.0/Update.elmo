var _davydog187$elm_pong$Update$near = F3(
	function (k, c, n) {
		return (_elm_lang$core$Native_Utils.cmp(n, k - c) > -1) && (_elm_lang$core$Native_Utils.cmp(n, k + c) < 1);
	});
var _davydog187$elm_pong$Update$within = F2(
	function (bullet, invader) {
		return A3(_davydog187$elm_pong$Update$near, invader.x, 20, bullet.x) && A3(_davydog187$elm_pong$Update$near, invader.y, 20, bullet.y);
	});
var _davydog187$elm_pong$Update$withinBullet = F2(
	function (b1, b2) {
		return A3(_davydog187$elm_pong$Update$near, b1.x, 30, b2.x) && A3(_davydog187$elm_pong$Update$near, b1.y, 30, b2.y);
	});
var _davydog187$elm_pong$Update$filterObject = function (_p0) {
	var _p1 = _p0;
	var _p2 = _p1;
	return (_elm_lang$core$Native_Utils.eq(_p2.x, _davydog187$elm_pong$Constants$outOfBounds) && _elm_lang$core$Native_Utils.eq(_p2.y, _davydog187$elm_pong$Constants$outOfBounds)) ? false : true;
};
var _davydog187$elm_pong$Update$physicsUpdate = F2(
	function (t, _p3) {
		var _p4 = _p3;
		return _elm_lang$core$Native_Utils.update(
			_p4,
			{x: _p4.x + (_p4.vx * t), y: _p4.y + (_p4.vy * t)});
	});
var _davydog187$elm_pong$Update$updateBullet = F3(
	function (t, invaders, bullet) {
		return ((!A3(_davydog187$elm_pong$Update$near, 0, _davydog187$elm_pong$Constants$halfHeight, bullet.y)) || (!_elm_lang$core$List$isEmpty(
			A2(
				_elm_lang$core$List$filter,
				function (i) {
					return A2(_davydog187$elm_pong$Update$within, bullet, i);
				},
				invaders)))) ? _elm_lang$core$Native_Utils.update(
			bullet,
			{x: _davydog187$elm_pong$Constants$outOfBounds, y: _davydog187$elm_pong$Constants$outOfBounds}) : A2(_davydog187$elm_pong$Update$physicsUpdate, t, bullet);
	});
var _davydog187$elm_pong$Update$updateBullets = F3(
	function (t, bullets, invaders) {
		var _p5 = _elm_lang$core$List$length(
			A2(_elm_lang$core$Debug$log, 'bullets before:', bullets));
		var aux = A2(
			_elm_lang$core$List$filter,
			_davydog187$elm_pong$Update$filterObject,
			A2(
				_elm_lang$core$List$map,
				function (b) {
					return A3(_davydog187$elm_pong$Update$updateBullet, t, invaders, b);
				},
				bullets));
		var _p6 = _elm_lang$core$List$length(
			A2(_elm_lang$core$Debug$log, 'bullets after:', aux));
		return aux;
	});
var _davydog187$elm_pong$Update$probDirChange = F2(
	function (seed, p) {
		var generator = A2(_elm_lang$core$Random$float, 0, 1);
		var _p7 = A2(_elm_lang$core$Random$step, generator, seed);
		var addProbability = _p7._0;
		var s = _p7._1;
		return (_elm_lang$core$Native_Utils.cmp(p, addProbability) > 0) ? {ctor: '_Tuple2', _0: -1, _1: s} : {ctor: '_Tuple2', _0: 1, _1: s};
	});
var _davydog187$elm_pong$Update$stepV = F3(
	function (v, lowerCollision, upperCollision) {
		return lowerCollision ? _elm_lang$core$Basics$abs(v) : (upperCollision ? (0 - _elm_lang$core$Basics$abs(v)) : v);
	});
var _davydog187$elm_pong$Update$randomMovement = F2(
	function (t, invader) {
		var changeY = A2(_davydog187$elm_pong$Update$probDirChange, invader.seedY, invader.yProbChange);
		var newVelY = invader.vy * _elm_lang$core$Tuple$first(changeY);
		var changeX = A2(_davydog187$elm_pong$Update$probDirChange, invader.seedX, invader.xProbChange);
		var newVelX = invader.vx * _elm_lang$core$Tuple$first(changeX);
		return A2(
			_davydog187$elm_pong$Update$physicsUpdate,
			t,
			_elm_lang$core$Native_Utils.update(
				invader,
				{
					vx: newVelX,
					vy: newVelY,
					seedX: _elm_lang$core$Tuple$second(changeX),
					seedY: _elm_lang$core$Tuple$second(changeY)
				}));
	});
var _davydog187$elm_pong$Update$decideMovement = F2(
	function (t, invader) {
		var lowerCollision = A3(_davydog187$elm_pong$Update$near, invader.y, 2, 0 - _davydog187$elm_pong$Constants$halfHeight);
		var upperCollision = A3(_davydog187$elm_pong$Update$near, invader.y, 2, _davydog187$elm_pong$Constants$halfHeight);
		var rightCollision = A3(_davydog187$elm_pong$Update$near, invader.x, 2, _davydog187$elm_pong$Constants$halfWidth);
		var leftCollision = A3(_davydog187$elm_pong$Update$near, invader.x, 2, 0 - _davydog187$elm_pong$Constants$halfWidth);
		if (leftCollision || (rightCollision || (upperCollision || lowerCollision))) {
			var _p8 = A2(_elm_lang$core$Debug$log, 'vy before:', invader.vy);
			var _p9 = A2(_elm_lang$core$Debug$log, 'vx before:', invader.vx);
			return A2(
				_davydog187$elm_pong$Update$physicsUpdate,
				t,
				_elm_lang$core$Native_Utils.update(
					invader,
					{
						vx: A3(_davydog187$elm_pong$Update$stepV, invader.vx, leftCollision, rightCollision),
						vy: A3(_davydog187$elm_pong$Update$stepV, invader.vy, lowerCollision, upperCollision)
					}));
		} else {
			return A2(_davydog187$elm_pong$Update$randomMovement, t, invader);
		}
	});
var _davydog187$elm_pong$Update$updateInvader = F3(
	function (t, bullets, invader) {
		return (!_elm_lang$core$List$isEmpty(
			A2(
				_elm_lang$core$List$filter,
				function (b) {
					return A2(_davydog187$elm_pong$Update$within, invader, b);
				},
				bullets))) ? _elm_lang$core$Native_Utils.update(
			invader,
			{x: _davydog187$elm_pong$Constants$outOfBounds, y: _davydog187$elm_pong$Constants$outOfBounds}) : A2(_davydog187$elm_pong$Update$decideMovement, t, invader);
	});
var _davydog187$elm_pong$Update$updateInvaders = F3(
	function (t, invaders, bullets) {
		var _p10 = A2(
			_elm_lang$core$Debug$log,
			'invaders before:',
			_elm_lang$core$List$length(invaders));
		var aux = A2(
			_elm_lang$core$List$filter,
			_davydog187$elm_pong$Update$filterObject,
			A2(
				_elm_lang$core$List$map,
				function (i) {
					return A3(_davydog187$elm_pong$Update$updateInvader, t, bullets, i);
				},
				invaders));
		var _p11 = A2(
			_elm_lang$core$Debug$log,
			'invaders after:',
			_elm_lang$core$List$length(aux));
		return aux;
	});
var _davydog187$elm_pong$Update$updateSpaceship = F3(
	function (t, dir, spaceship) {
		var spaceship1 = A2(
			_davydog187$elm_pong$Update$physicsUpdate,
			t,
			_elm_lang$core$Native_Utils.update(
				spaceship,
				{
					vx: _elm_lang$core$Basics$toFloat(dir) * 200
				}));
		return _elm_lang$core$Native_Utils.update(
			spaceship1,
			{
				x: A3(_elm_lang$core$Basics$clamp, 22 - _davydog187$elm_pong$Constants$halfWidth, _davydog187$elm_pong$Constants$halfWidth - 22, spaceship1.x)
			});
	});
var _davydog187$elm_pong$Update$checkBullet = F2(
	function (b1, b2) {
		return A2(_davydog187$elm_pong$Update$withinBullet, b1, b2);
	});
var _davydog187$elm_pong$Update$craftBullet = F2(
	function (spaceship, bullets) {
		var newBullet = {x: spaceship.x, y: spaceship.y, vx: 0, vy: 200};
		return A2(
			_elm_lang$core$List$any,
			_davydog187$elm_pong$Update$checkBullet(newBullet),
			bullets) ? {ctor: '[]'} : {
			ctor: '::',
			_0: newBullet,
			_1: {ctor: '[]'}
		};
	});
