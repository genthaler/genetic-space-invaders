var _folkertdev$elm_state$State$tailRec = function (f) {
	var go = function (step) {
		go:
		while (true) {
			var _p0 = step;
			if (_p0.ctor === 'Loop') {
				var _v1 = f(_p0._0);
				step = _v1;
				continue go;
			} else {
				return _p0._0;
			}
		}
	};
	return function (_p1) {
		return go(
			f(_p1));
	};
};
var _folkertdev$elm_state$State$run = F2(
	function (initialState, _p2) {
		var _p3 = _p2;
		return _p3._0(initialState);
	});
var _folkertdev$elm_state$State$finalValue = function (initialState) {
	return function (_p4) {
		return _elm_lang$core$Tuple$first(
			A2(_folkertdev$elm_state$State$run, initialState, _p4));
	};
};
var _folkertdev$elm_state$State$finalState = function (initialState) {
	return function (_p5) {
		return _elm_lang$core$Tuple$second(
			A2(_folkertdev$elm_state$State$run, initialState, _p5));
	};
};
var _folkertdev$elm_state$State$State = function (a) {
	return {ctor: 'State', _0: a};
};
var _folkertdev$elm_state$State$state = function (value) {
	return _folkertdev$elm_state$State$State(
		function (s) {
			return {ctor: '_Tuple2', _0: value, _1: s};
		});
};
var _folkertdev$elm_state$State$embed = function (f) {
	return _folkertdev$elm_state$State$State(
		function (s) {
			return {
				ctor: '_Tuple2',
				_0: f(s),
				_1: s
			};
		});
};
var _folkertdev$elm_state$State$advance = function (f) {
	return _folkertdev$elm_state$State$State(f);
};
var _folkertdev$elm_state$State$map = F2(
	function (f, _p6) {
		var _p7 = _p6;
		return _folkertdev$elm_state$State$State(
			function (currentState) {
				var _p8 = _p7._0(currentState);
				var value = _p8._0;
				var newState = _p8._1;
				return {
					ctor: '_Tuple2',
					_0: f(value),
					_1: newState
				};
			});
	});
var _folkertdev$elm_state$State$map2 = F3(
	function (f, _p10, _p9) {
		var _p11 = _p10;
		var _p12 = _p9;
		return _folkertdev$elm_state$State$State(
			function (currentState) {
				var _p13 = _p11._0(currentState);
				var value1 = _p13._0;
				var newState = _p13._1;
				var _p14 = _p12._0(newState);
				var value2 = _p14._0;
				var newerState = _p14._1;
				return {
					ctor: '_Tuple2',
					_0: A2(f, value1, value2),
					_1: newerState
				};
			});
	});
var _folkertdev$elm_state$State$andMap = _elm_lang$core$Basics$flip(
	_folkertdev$elm_state$State$map2(
		F2(
			function (x, y) {
				return x(y);
			})));
var _folkertdev$elm_state$State$map3 = F4(
	function (f, step1, step2, step3) {
		return A2(
			_folkertdev$elm_state$State$andMap,
			step3,
			A2(
				_folkertdev$elm_state$State$andMap,
				step2,
				A2(_folkertdev$elm_state$State$map, f, step1)));
	});
var _folkertdev$elm_state$State$andThen = F2(
	function (f, _p15) {
		var _p16 = _p15;
		return _folkertdev$elm_state$State$State(
			function (s) {
				var _p17 = _p16._0(s);
				var a = _p17._0;
				var newState = _p17._1;
				var _p18 = f(a);
				var g = _p18._0;
				return g(newState);
			});
	});
var _folkertdev$elm_state$State$join = function (_p19) {
	var _p20 = _p19;
	return _folkertdev$elm_state$State$State(
		function (s) {
			var _p21 = _p20._0(s);
			var g = _p21._0._0;
			var newState = _p21._1;
			return g(newState);
		});
};
var _folkertdev$elm_state$State$get = _folkertdev$elm_state$State$State(
	function (s) {
		return {ctor: '_Tuple2', _0: s, _1: s};
	});
var _folkertdev$elm_state$State$put = function (x) {
	return _folkertdev$elm_state$State$State(
		function (_p22) {
			return {
				ctor: '_Tuple2',
				_0: {ctor: '_Tuple0'},
				_1: x
			};
		});
};
var _folkertdev$elm_state$State$modify = function (f) {
	return _folkertdev$elm_state$State$State(
		function (s) {
			return {
				ctor: '_Tuple2',
				_0: {ctor: '_Tuple0'},
				_1: f(s)
			};
		});
};
var _folkertdev$elm_state$State$Done = function (a) {
	return {ctor: 'Done', _0: a};
};
var _folkertdev$elm_state$State$Loop = function (a) {
	return {ctor: 'Loop', _0: a};
};
var _folkertdev$elm_state$State$tailRecM = F2(
	function (f, a) {
		var helper = function (_p23) {
			var _p24 = _p23;
			var _p26 = _p24._1;
			var _p25 = _p24._0;
			if (_p25.ctor === 'Loop') {
				return _folkertdev$elm_state$State$Loop(
					{ctor: '_Tuple2', _0: _p25._0, _1: _p26});
			} else {
				return _folkertdev$elm_state$State$Done(
					{ctor: '_Tuple2', _0: _p25._0, _1: _p26});
			}
		};
		var step = function (_p27) {
			var _p28 = _p27;
			var _p29 = f(_p28._0);
			return helper(
				_p29._0(_p28._1));
		};
		return _folkertdev$elm_state$State$State(
			function (s) {
				return A2(
					_folkertdev$elm_state$State$tailRec,
					step,
					{ctor: '_Tuple2', _0: a, _1: s});
			});
	});
var _folkertdev$elm_state$State$replicateM = F2(
	function (n, s) {
		var go = function (_p30) {
			var _p31 = _p30;
			var _p33 = _p31._1;
			var _p32 = _p31._0;
			return (_elm_lang$core$Native_Utils.cmp(_p32, 1) < 0) ? _folkertdev$elm_state$State$state(
				_folkertdev$elm_state$State$Done(_p33)) : A2(
				_folkertdev$elm_state$State$map,
				function (x) {
					return _folkertdev$elm_state$State$Loop(
						{
							ctor: '_Tuple2',
							_0: _p32 - 1,
							_1: {ctor: '::', _0: x, _1: _p33}
						});
				},
				s);
		};
		return A2(
			_folkertdev$elm_state$State$tailRecM,
			go,
			{
				ctor: '_Tuple2',
				_0: n,
				_1: {ctor: '[]'}
			});
	});
var _folkertdev$elm_state$State$tailRecM2 = F3(
	function (f, a, b) {
		return A2(
			_folkertdev$elm_state$State$tailRecM,
			_elm_lang$core$Basics$uncurry(f),
			{ctor: '_Tuple2', _0: a, _1: b});
	});
var _folkertdev$elm_state$State$foldlM = function (f) {
	var step = F2(
		function (accum, elements) {
			var _p34 = elements;
			if (_p34.ctor === '[]') {
				return _folkertdev$elm_state$State$state(
					_folkertdev$elm_state$State$Done(accum));
			} else {
				return A2(
					_folkertdev$elm_state$State$map,
					function (a_) {
						return _folkertdev$elm_state$State$Loop(
							{ctor: '_Tuple2', _0: a_, _1: _p34._1});
					},
					A2(f, accum, _p34._0));
			}
		});
	return _folkertdev$elm_state$State$tailRecM2(step);
};
var _folkertdev$elm_state$State$traverse = function (f) {
	return function (_p35) {
		return A2(
			_folkertdev$elm_state$State$map,
			_elm_lang$core$List$reverse,
			A3(
				_folkertdev$elm_state$State$foldlM,
				F2(
					function (accum, elem) {
						return A3(
							_folkertdev$elm_state$State$map2,
							F2(
								function (x, y) {
									return {ctor: '::', _0: x, _1: y};
								}),
							f(elem),
							_folkertdev$elm_state$State$state(accum));
					}),
				{ctor: '[]'},
				_p35));
	};
};
var _folkertdev$elm_state$State$combine = _folkertdev$elm_state$State$traverse(_elm_lang$core$Basics$identity);
var _folkertdev$elm_state$State$zipWithM = F3(
	function (f, ps, qs) {
		return _folkertdev$elm_state$State$combine(
			A3(_elm_lang$core$List$map2, f, ps, qs));
	});
var _folkertdev$elm_state$State$mapAndUnzipM = F2(
	function (f, xs) {
		return A2(
			_folkertdev$elm_state$State$map,
			_elm_lang$core$List$unzip,
			A2(_folkertdev$elm_state$State$traverse, f, xs));
	});
var _folkertdev$elm_state$State$filterM = function (predicate) {
	var folder = F2(
		function (elem, accum) {
			var keepIfTrue = function (verdict) {
				return verdict ? {ctor: '::', _0: elem, _1: accum} : accum;
			};
			return A2(
				_folkertdev$elm_state$State$map,
				keepIfTrue,
				predicate(elem));
		});
	return function (_p36) {
		return A2(
			_folkertdev$elm_state$State$map,
			_elm_lang$core$List$reverse,
			A3(
				_folkertdev$elm_state$State$foldlM,
				_elm_lang$core$Basics$flip(folder),
				{ctor: '[]'},
				_p36));
	};
};
var _folkertdev$elm_state$State$foldrM = F3(
	function (f, initialValue, xs) {
		return A3(
			_folkertdev$elm_state$State$foldlM,
			_elm_lang$core$Basics$flip(f),
			initialValue,
			_elm_lang$core$List$reverse(xs));
	});
