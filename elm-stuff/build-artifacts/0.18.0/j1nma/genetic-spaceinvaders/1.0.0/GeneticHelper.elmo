var _j1nma$genetic_spaceinvaders$GeneticHelper$updateSolution = F2(
	function (newFitness, _p0) {
		var _p1 = _p0;
		return A3(
			_ckoster22$elm_genetic$Genetic$IntermediateValue,
			_p1._0,
			{
				dna: {genes: _p1._1.dna.genes, fitness: newFitness},
				points: newFitness
			},
			_p1._2);
	});
var _j1nma$genetic_spaceinvaders$GeneticHelper$max_iterations = 3000;
var _j1nma$genetic_spaceinvaders$GeneticHelper$isDoneEvolving = F3(
	function (bestDna, bestDnaScore, numGenerations) {
		return _elm_lang$core$Native_Utils.eq(
			bestDnaScore,
			_elm_lang$core$Basics$toFloat(_elm_lang$core$Random$maxInt)) || (_elm_lang$core$Native_Utils.cmp(numGenerations, _j1nma$genetic_spaceinvaders$GeneticHelper$max_iterations) > -1);
	});
var _j1nma$genetic_spaceinvaders$GeneticHelper$randomProbabilityGenerator = A2(
	_elm_lang$core$Random$list,
	2,
	A2(_elm_lang$core$Random$float, 0, 1));
var _j1nma$genetic_spaceinvaders$GeneticHelper$randDnaGenerator = A2(
	_elm_lang$core$Random$map,
	function (randGenes) {
		return {genes: randGenes, fitness: 0.0};
	},
	A3(
		_elm_lang$core$Random$map2,
		F2(
			function (x, y) {
				return A2(_elm_lang$core$Basics_ops['++'], x, y);
			}),
		_j1nma$genetic_spaceinvaders$GeneticHelper$randomProbabilityGenerator,
		A2(
			_elm_lang$core$Random$list,
			2,
			A2(_elm_lang$core$Random$float, -100, 100))));
var _j1nma$genetic_spaceinvaders$GeneticHelper$evaluateSolution = function (dna) {
	return dna.fitness;
};
var _j1nma$genetic_spaceinvaders$GeneticHelper$indexWhereProbabilitiesEnd = 1;
var _j1nma$genetic_spaceinvaders$GeneticHelper$numberOfGenes = 4;
var _j1nma$genetic_spaceinvaders$GeneticHelper$crossover_split_index = _elm_lang$core$Basics$floor(
	_elm_lang$core$Basics$toFloat(_j1nma$genetic_spaceinvaders$GeneticHelper$numberOfGenes) / 2);
var _j1nma$genetic_spaceinvaders$GeneticHelper$crossoverDnas = F2(
	function (dna1, dna2) {
		var _p2 = {
			ctor: '_Tuple2',
			_0: A2(_elm_lang$core$List$take, _j1nma$genetic_spaceinvaders$GeneticHelper$crossover_split_index, dna1.genes),
			_1: A2(_elm_lang$core$List$drop, _j1nma$genetic_spaceinvaders$GeneticHelper$crossover_split_index, dna2.genes)
		};
		var dnaPart1 = _p2._0;
		var dnaPart2 = _p2._1;
		return {
			genes: A2(_elm_lang$core$List$append, dnaPart1, dnaPart2),
			fitness: (dna1.fitness + dna2.fitness) / 2
		};
	});
var _j1nma$genetic_spaceinvaders$GeneticHelper$mutateDna = function (dna) {
	var randomProbGenerator = A2(_elm_lang$core$Random$float, 0, 1);
	var randomVelGenerator = A2(_elm_lang$core$Random$float, -100, 100);
	var randomIndexGenerator = A2(_elm_lang$core$Random$int, 0, _j1nma$genetic_spaceinvaders$GeneticHelper$numberOfGenes - 1);
	return A4(
		_elm_lang$core$Random$map3,
		F3(
			function (randomIndex, randomVelGene, randomProbGene) {
				return function (randGenes) {
					return {genes: randGenes, fitness: dna.fitness + 1.0};
				}(
					A2(
						_elm_lang$core$List$indexedMap,
						F2(
							function (index, gene) {
								return _elm_lang$core$Native_Utils.eq(index, randomIndex) ? ((_elm_lang$core$Native_Utils.cmp(index, _j1nma$genetic_spaceinvaders$GeneticHelper$indexWhereProbabilitiesEnd) > -1) ? randomVelGene : randomProbGene) : gene;
							}),
						dna.genes));
			}),
		randomIndexGenerator,
		randomVelGenerator,
		randomProbGenerator);
};
var _j1nma$genetic_spaceinvaders$GeneticHelper$myOptions = {randomDnaGenerator: _j1nma$genetic_spaceinvaders$GeneticHelper$randDnaGenerator, evaluateSolution: _j1nma$genetic_spaceinvaders$GeneticHelper$evaluateSolution, crossoverDnas: _j1nma$genetic_spaceinvaders$GeneticHelper$crossoverDnas, mutateDna: _j1nma$genetic_spaceinvaders$GeneticHelper$mutateDna, isDoneEvolving: _j1nma$genetic_spaceinvaders$GeneticHelper$isDoneEvolving, method: _ckoster22$elm_genetic$Genetic$MaximizeScore};
var _j1nma$genetic_spaceinvaders$GeneticHelper$initialEvolve = function (seed) {
	return A2(
		_elm_lang$core$Random$step,
		_ckoster22$elm_genetic$Genetic$executeInitialStep(_j1nma$genetic_spaceinvaders$GeneticHelper$myOptions),
		seed);
};
var _j1nma$genetic_spaceinvaders$GeneticHelper$initialDna = function (seed) {
	return _ckoster22$elm_genetic$Genetic$dnaFromValue(
		_elm_lang$core$Tuple$first(
			_j1nma$genetic_spaceinvaders$GeneticHelper$initialEvolve(seed)));
};
var _j1nma$genetic_spaceinvaders$GeneticHelper$evolve = F2(
	function (seed, intermediate) {
		return A2(
			_elm_lang$core$Random$step,
			A2(_ckoster22$elm_genetic$Genetic$executeStep, _j1nma$genetic_spaceinvaders$GeneticHelper$myOptions, intermediate),
			seed);
	});
var _j1nma$genetic_spaceinvaders$GeneticHelper$Dna = F2(
	function (a, b) {
		return {genes: a, fitness: b};
	});
