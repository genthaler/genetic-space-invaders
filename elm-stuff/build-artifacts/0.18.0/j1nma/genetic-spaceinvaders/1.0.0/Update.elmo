var _j1nma$genetic_spaceinvaders$Update$calculateFitness = F2(
	function (dna, invaders) {
		return _elm_lang$core$Basics$toFloat(
			_elm_lang$core$List$length(
				A2(
					_elm_lang$core$List$filter,
					function (invader) {
						return _elm_lang$core$Native_Utils.eq(
							invader.xProbChange,
							_j1nma$genetic_spaceinvaders$Auxiliary$getValue(
								A2(
									_elm_lang$core$Array$get,
									0,
									_elm_lang$core$Array$fromList(dna.genes)))) || (_elm_lang$core$Native_Utils.eq(
							invader.yProbChange,
							_j1nma$genetic_spaceinvaders$Auxiliary$getValue(
								A2(
									_elm_lang$core$Array$get,
									1,
									_elm_lang$core$Array$fromList(dna.genes)))) || (_elm_lang$core$Native_Utils.eq(
							invader.vx,
							_j1nma$genetic_spaceinvaders$Auxiliary$getValue(
								A2(
									_elm_lang$core$Array$get,
									2,
									_elm_lang$core$Array$fromList(dna.genes)))) || _elm_lang$core$Native_Utils.eq(
							invader.vy,
							_j1nma$genetic_spaceinvaders$Auxiliary$getValue(
								A2(
									_elm_lang$core$Array$get,
									3,
									_elm_lang$core$Array$fromList(dna.genes))))));
					},
					invaders)));
	});
var _j1nma$genetic_spaceinvaders$Update$spawnNewInvadersFromBestDna = F3(
	function (seed, amount, dna) {
		var _p0 = amount;
		if (_p0 === 0) {
			return {ctor: '[]'};
		} else {
			var randomPositionAndSeed = _j1nma$genetic_spaceinvaders$Auxiliary$randomPosition(seed);
			var newSeed = _elm_lang$core$Tuple$second(randomPositionAndSeed);
			var randomP = _elm_lang$core$Tuple$first(randomPositionAndSeed);
			var newX = _elm_lang$core$Tuple$first(randomP);
			var newY = _elm_lang$core$Tuple$second(randomP);
			return {
				ctor: '::',
				_0: {
					x: newX,
					y: newY,
					vx: _j1nma$genetic_spaceinvaders$Auxiliary$getValue(
						A2(
							_elm_lang$core$Array$get,
							2,
							_elm_lang$core$Array$fromList(dna.genes))),
					vy: _j1nma$genetic_spaceinvaders$Auxiliary$getValue(
						A2(
							_elm_lang$core$Array$get,
							3,
							_elm_lang$core$Array$fromList(dna.genes))),
					xProbChange: _j1nma$genetic_spaceinvaders$Auxiliary$getValue(
						A2(
							_elm_lang$core$Array$get,
							0,
							_elm_lang$core$Array$fromList(dna.genes))),
					yProbChange: _j1nma$genetic_spaceinvaders$Auxiliary$getValue(
						A2(
							_elm_lang$core$Array$get,
							1,
							_elm_lang$core$Array$fromList(dna.genes))),
					seedX: newSeed,
					seedY: newSeed,
					wasHit: false
				},
				_1: A3(_j1nma$genetic_spaceinvaders$Update$spawnNewInvadersFromBestDna, newSeed, _p0 - 1, dna)
			};
		}
	});
var _j1nma$genetic_spaceinvaders$Update$updateBullet = F3(
	function (t, invaders, bullet) {
		return ((_elm_lang$core$Native_Utils.cmp(bullet.y, _j1nma$genetic_spaceinvaders$Constants$halfHeight - 40) > -1) || A2(
			_elm_lang$core$List$any,
			function (i) {
				return A2(_j1nma$genetic_spaceinvaders$Auxiliary$within, bullet, i);
			},
			invaders)) ? _elm_lang$core$Native_Utils.update(
			bullet,
			{hit: true}) : A2(_j1nma$genetic_spaceinvaders$Auxiliary$physicsUpdate, t, bullet);
	});
var _j1nma$genetic_spaceinvaders$Update$updateBullets = F3(
	function (t, bullets, invaders) {
		return A2(
			_elm_lang$core$List$filter,
			function (b) {
				return !b.hit;
			},
			A2(
				_elm_lang$core$List$map,
				function (b) {
					return A3(_j1nma$genetic_spaceinvaders$Update$updateBullet, t, invaders, b);
				},
				bullets));
	});
var _j1nma$genetic_spaceinvaders$Update$updateInvader = F3(
	function (t, bullets, invader) {
		return A2(
			_elm_lang$core$List$any,
			function (b) {
				return A2(_j1nma$genetic_spaceinvaders$Auxiliary$within, b, invader);
			},
			bullets) ? _elm_lang$core$Native_Utils.update(
			invader,
			{wasHit: true}) : A2(_j1nma$genetic_spaceinvaders$Auxiliary$decideMovement, t, invader);
	});
var _j1nma$genetic_spaceinvaders$Update$updateInvaders = F3(
	function (t, invaders, bullets) {
		return A2(
			_elm_lang$core$List$filter,
			function (i) {
				return !i.wasHit;
			},
			A2(
				_elm_lang$core$List$map,
				function (i) {
					return A3(_j1nma$genetic_spaceinvaders$Update$updateInvader, t, bullets, i);
				},
				invaders));
	});
var _j1nma$genetic_spaceinvaders$Update$updateSpaceship = F3(
	function (t, dir, spaceship) {
		var spaceship1 = A2(
			_j1nma$genetic_spaceinvaders$Auxiliary$physicsUpdate,
			t,
			_elm_lang$core$Native_Utils.update(
				spaceship,
				{
					vx: _elm_lang$core$Basics$toFloat(dir) * 200
				}));
		return _elm_lang$core$Native_Utils.update(
			spaceship1,
			{
				x: A3(_elm_lang$core$Basics$clamp, 22 - _j1nma$genetic_spaceinvaders$Constants$halfWidth, _j1nma$genetic_spaceinvaders$Constants$halfWidth - 22, spaceship1.x)
			});
	});
var _j1nma$genetic_spaceinvaders$Update$checkBullet = F2(
	function (b1, b2) {
		return A2(_j1nma$genetic_spaceinvaders$Auxiliary$withinBullet, b1, b2);
	});
var _j1nma$genetic_spaceinvaders$Update$craftBullet = F2(
	function (spaceship, bullets) {
		var newBullet = {x: spaceship.x, y: spaceship.y, vx: 0, vy: 200, hit: false};
		return A2(
			_elm_lang$core$List$any,
			_j1nma$genetic_spaceinvaders$Update$checkBullet(newBullet),
			bullets) ? {ctor: '[]'} : {
			ctor: '::',
			_0: newBullet,
			_1: {ctor: '[]'}
		};
	});
